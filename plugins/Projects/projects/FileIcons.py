#----------------------------------------------------------------------
# This file was generated by /usr/local/bin/img2py
#
from wx import ImageFromStream, BitmapFromImage, EmptyIcon
import cStringIO, zlib


def getBadgeAddedData():
    return zlib.decompress(
'x\xda\x01x\x02\x87\xfd\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x10\
\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x00\x04sBIT\x08\
\x08\x08\x08|\x08d\x88\x00\x00\x02/IDAT8\x8d\x9d\x93\xbbkTQ\x10\xc6\xbfs\xee\
\x9e\xbd7\xbb\x9b\xddl\xa2\x89$H\xd0\xc4\xc4\xd5\x80\x85\x85D|`\xe3\x1f H@\
\xad\x84\xb4ba\xa5\xa0\xe9--\xb4\xb1\xb0\xd34\x96\xb6Z\xa8\x10\x10\x04\x97\
\x14bba\x92e\xb3\xd9\xec\xfb\xee}\x9c\x99\xb1H\xd4\x04\x92\xa0\x0e\x1cf\xe0\
\x9b\xef7\x07\xe6\x1c\xe0\x80\xa8|\xbap\xb6\xbcp\xe9\xdaA=\xfa \x91,^\n\xd9\
\xe7\xff\x05(}<?cLf\xdc$\xb3}\xa5w\xe7\xe6\xfe\x19\xa0D\x9e\x1a/\x8bdO\x1eLr\
\xbf8\x7f*\xf9\xd7\x80\xd2\xfb\xe99\xe3\xf5\xe5\xb5\xe3\x02\x00\x8c\xdbkrY\
\xef\xc5\x9e\x83\xca\xc5\xcb\x19\xf8\xb8\x0e\xb1WA8#,\xa3&\x95K\xb9\xe9~p\
\xb4\x01\x0eZP\x89\x11t\xebe\x04\x9dZW,V\x85\xe9\x0bH\xde\x92\x8d^\xab\xf5\
\x85\x8bE\x93\xee;\xed\xb8i8:\t@C\xb1\x80\x822lg\x15\x12[\x082\xd0f\x04\x12[\
P\x14\xc2\x86\x01\xe2\xd0G\xe876\x14\x00\x94>L/\xb9\x99\x81\xe3^n\x08\xdcY\
\x06\x87\r\xb0\xb5\x90\xd8\x82\xb7\x8f\xc4\x04!\x05\'5\x89\xa0]\x83\xdf\xda\
\xacG~0\xa6\x01\xa0\x9am\x14\x82Ze\xa5[-A\x99\xa3\x10f\x081\x84h+\xdb\xad\
\xda\xc9\x14\x10\xb4\xeb\xe86\xab\x1dG\xd1\xc9\xa9\xd9\x95M\r\x00SS\x8b\x91\
\xc3\xad\x82\xbf\xb9\xbeNQ\x0c\xe5\x0cB\xec\xb6\x99\x18\xc2\x04\xc0@\x88\xd0\
in\x04\x88P\x18\xbb\xf1\xbd\xbck\x0bCW\x16\xdb\x12\xd3\x93\xa0Q\x01t\xfe\xcf\
-,\x01\xc4P\xe60b\xbf\r\x8e\xe8\xcd\x89\xdbK?~\xf9\x12;W"L\x93Z\x1bH\xd4\x04\
T\n\xda\xcdC%\x13\xa0\xd6\x1a8\xa8C9\x83\xe00>\xb6\xd3\xb3\x1b@<\xaeu\x02\
\xd0.\xb4\x19E\xd8\xac\x83\xe2\x16\x92\xde0\x9c\x04\x83\xc2\x086\x88\x8f\xec\
\x0f\xb02\xac\x94\x83vy\x15\xddZ%"\x96y\x10W9\\\x99M\xf6\xf4\xa6\xbct\x0e\
\x1cD\xb9}\x01\xcc4P]^\xec\xb0\xe5g\x137\xbf\xdd\xdb!\xdd\xfd\xfc\xf8\xd0\
\x9d\xa6]{hC\xdb\xbf\xd7\x8b\x04\x00|}5qk_q;\x16\x1ex3\xc5G\xf8\xfd/~\x02\
\x7f\xdf3\x90\xf9\\2j\x00\x00\x00\x00IEND\xaeB`\x82\x04\xdd\x17=' )

def getBadgeAddedBitmap():
    return BitmapFromImage(getBadgeAddedImage())

def getBadgeAddedImage():
    stream = cStringIO.StringIO(getBadgeAddedData())
    return ImageFromStream(stream)

#----------------------------------------------------------------------
def getBadgeConflictData():
    return zlib.decompress(
'x\xda\x01x\x02\x87\xfd\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x10\
\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x00\x04sBIT\x08\
\x08\x08\x08|\x08d\x88\x00\x00\x02/IDAT8\x8d\xa5\x92OHTq\x10\xc7?\xef\xed\
\xb3\xb5u7sK\xb1?\x18\x89\xa0(\xa4`\x87\xd5\x92<gP\x97,\xb4\xae\x05]\xc2\xe8\
\xd6)\xe8 A\x10jd\x04\x12%\x11\x06\x91\x90d\x12X\xd2!:\x15l\x85b\x18\x1a\xba\
\xba\x9a\xe9*\xfa\xf6\xbd\xdfL\x17\x8d(-\xa39\xcc\xc0\xfc\xf9\xce\xf7;\x0c\
\xfc\xa7Y\xeb\x15\xb4\xebx \x993\xf1\x0e1\xb3\xb9s\xbbk\xad\xfa\x87f\xad>g=\
\x80dt\xbc%\x98\x7f\xb8L\x8da\xc2\xf4\x9c\x01nn\x98\xd6\xb7\xdeX4\xd1W5o\xd2\
s\x9a\x9e}\xaf\xe3\xdd\xfbgF\xbbb\xd1\xb5z\xed\xb5\x92\xcb\x96}7T\xd0\x18\
\xb1l\x1b\'+J\xa8\xb01jY\xee\x95\rm\x9f|V]1\xf14f\xd4\xb8\xeaN\xb6i:\xd9\xa1\
\x92\x9e\xd6\xcf\x0f\xf6\xf9#\x9d\xa5\x15\x7fe\xa0F:#%M\xb6\xf8\x0b|\xea\xeb\
b\xb8\xf7\x0e\xe2%\xc8)\xbf\x18P\xb5Z\xff\x08\x90\xe8\x895dD\xab\xca\xb2\xf6\
\x1cci\xac\tUP\x85\xe5/\xcdD\x8a\xea\x08\xe6\xd7\x1c\x1c\xba]\xd4\xb0&\xc0d\
\xff\xa1\xb0\xa8\xb4\x84\nO \xfe\x0c\xc8\xca\xb4*"\x1e\xb2<Dv\xc9ID\xf4j\xbc\
\xad4\xfc\x1b\x80\x9fZ\xea\x08\x15\xd4o\x0b\xe6\x14\xe2M?\x02\x94\xcc\xad\
\xa1Ua\xb8\x89\x1bl\xce- \xbb\xb8a\x97\xba\xf3\x97V\xe7,\x80\xd1\xeeX\x91\
\xad\xde\xc7\x9du/\x1c\xb3\xf4\x16o\xea\x16"`gd\xb28\x9d"\x98%\x04\x02J`K-\
\x81\xc8Q\xe2\xad\x95iY\xd6\xb2\xca\xcb\xc9a\x1b\xc0\x16\xef~\xa4\xf8\x9c\
\xa3\xb2\x80I\xbd\x06\x15@\x19\x19\x18d\xea\xc38\xa0\xa0\x82?\xfb\x1c\xcb^$/\
va\x93\xef\xba\xd7\x01\xac\xb1\xc7\x95u\x19\xd9\xe5O\xf2jZ\xf0S/\xf1\x92\xf7\
\x00\x10QT-P\xb0\x03\x8a\xa5iT\rv`;\x99{\x9b\x89\xb770;8p\xc4Q_\xda#E\xa7\
\x00p\xc2\xd58\xe1\xaa\x15q\xd6\xaa\xfc\x15\xa7?\xee\x81\xb5\x89\x1d\x07\xce\
\xf25\xde\x7f\xcdA\xa4?\xf9\xea\xfci5\x82\x18\xe1\xe7h<\x83q=|\xd7\xc3\xb8\
\x1e\xc6\xf51i\x1f\xe3\x19\xc47\x881o~\xfd\x8b\x7f\xb6\xefH\xce\x1az\xbfF\
\x97g\x00\x00\x00\x00IEND\xaeB`\x82R\x8e$N' )

def getBadgeConflictBitmap():
    return BitmapFromImage(getBadgeConflictImage())

def getBadgeConflictImage():
    stream = cStringIO.StringIO(getBadgeConflictData())
    return ImageFromStream(stream)

#----------------------------------------------------------------------
def getBadgeInaccessibleData():
    return zlib.decompress(
'x\xda\x01\x91\x02n\xfd\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x10\
\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x00\x04sBIT\x08\
\x08\x08\x08|\x08d\x88\x00\x00\x02HIDAT8\x8d\xa5\x93[KTQ\x14\xc7\x7f\xce\x19\
\x15\xc9[i*\x8eM\xde\x92@\xc5\xe8M"\xec)\xc8\xfc\x1e\xbd\x14=\x14\xbe\xdbC\
\x81\xd0M\xc2\x92\xfa\x08=U\xf4\tz\x92L\xad\x981&\x9bT\x9cdL\xc7\xb9\x9c\xcb\
\xde\xfb\xec}z8\xd3hJ/\xb5`\xb1\x16\x9b\xf5\xbf\xb0\xd8\x0b\xfe3\xaa\x0e?d_\
\xcc]\xad\xaa\x89\xde#b\xc5\xd1\xbe\xc0\x04\x98\xc0\xaf\xc5\x93\xeb\xba\xe4L\
\xed\xda\xde\xeb\xa1\xa9)\xf9{>z\x10\x9cy\xfad\xbc\xa6\xb5i\xae\xbe\xaf3fY\
\x01(\x1f\x8c\x81\xc0\xa0\xa5\x19\xce\'\xd7^6\x14\xbf\xdf\x02\x1e\x1cq\x90\
\x99\x9d\xb9R\xdb\xd62\xdbt\xf6t\xb7\xb5\x9b\x86\x9d-\xf0\r\xf8\n\x84\x84\
\xc6\x16\xfc\x93}\xe4\x16\x93_\xed\xf4\xc6\xcd\x9e\x873o\x01\xacP\xf9\xd1x][\
\xeb\xf3\xc63]qk\xe7\x1bd7A\xe9\x10($H\x05;\xdbD\xbc\x12\xb5=\xfd\'\xa4m_\
\xba\xde\xdb\xbb\xf2xa1\x15\x01\x88F\xaa\xa7\x1bz\xdacV6\x05\x995\xf0\x14\
\xb8n\x98\x8e\x07\x8e\x1b\x12\xa5SD\xbf\xbc\xa7\xb5\xaf+Fud\xba\xb2\x03ct\
\xdc\xc2\x87\xcd5\xd0\x01\xf8~\xa8\xaa\xca)\xfdr\x15\xb0\x9a$\xda\xdeM\x951\
\xf1\nA \x84\x87+\x1a\xf0Dh\xfd\x0f\xa0,\xf7*\xec\x85\x00\xd7\xc3x\xae\xb7\
\xef@\xc8\x00)\xc1v\xcb\xea\x07\x80\x15\xb2r\n\x01R\xa2=\x11\xec;\x90^\x1dZA\
\xa1\x00\x01\x07\x14\x0f\x11(\t\x8e\x03F\x83\x12u\x00\x11\x80\xa0T\xdc\xd0\
\xae\x0f\xcd\xadP\xd8\x03\xdb\x0e\x07\x1d\x07\xecru\x1d(\xe4\xa1\xe3\x14Jj\
\xfcBq\xa3B s\xb9\xc9\xecb2\xe3\xc7\x87\xe0x\x07\xec\xe5C\x12\xbb\x0ct\\L>\
\x8f\xe9\x8c\xe3\x8e\\`c~1\xa3~\xeeLV\xfe\xc1\xcc\xc2r\xeaZ[KJ\x14K\xa3u\x83\
\xc3\xcdV1\x07?6A\t\x02W\xe0;\x0e\xa6\xab\x17q\xfe"[\xef\xe6W\x8b\x9f>\xde\
\x18YZys\xe4\x16\x12\x97\xc7&\x1a\x07\xfa\x9f\xb5\r\x0e\xc4\xaa\x8dB+\x851\
\x06\x1d\x802\xb0\xfd\xe13\xc5\xe5\xa5\xdb\xe7\x12\xe9\xfb\x7f=\xa6\xc4\xd8\
\xe8\x84U\x7f\xec.\x96\x15\x0f\xb4\x12Fk\xaa\x02S\xab\x1do]\xef\xe5\xeeX\xba\
\xe6\xd5P"!\x0f\xe3\xfe9~\x01/\x0em\x03\xe30#o\x00\x00\x00\x00IEND\xaeB`\x82\
SX\'\xef' )

def getBadgeInaccessibleBitmap():
    return BitmapFromImage(getBadgeInaccessibleImage())

def getBadgeInaccessibleImage():
    stream = cStringIO.StringIO(getBadgeInaccessibleData())
    return ImageFromStream(stream)

#----------------------------------------------------------------------
def getBadgeMergeData():
    return zlib.decompress(
'x\xda\x018\x02\xc7\xfd\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x10\
\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x00\x04sBIT\x08\
\x08\x08\x08|\x08d\x88\x00\x00\x01\xefIDAT8\x8d\xe5\x92\xcfK\xd3q\x1c\xc6_\
\x9f\xaf\x13\xd7\xfc\x05\xda\xfc\x8e\xd9\xd9\xcbl!\x9d$\x083\xa8(\x82\xb6C5\
\x91\x0e\x13\xf2\x10\x9d\xb2\xff""=\x1a\x06AEF\xcc\x86!B\x07\xa1\xcb\x90.u\
\x10\xa1\x83X\xfa\x9d3\tuSs\xdb\xf7\xf3~w\xb3b\x03\xff\x80\x9e\xf3\xf3\x8b\
\x87\xc7\x00<\xc8\x8d\xce\xaah\xbf\xef\xd8\xd8D\xff\xd4&\xc7 \x9dMe\xac\x95\
\xd0\xf3\xe4\xf4\x153\x96\x1b\x9dw\x9b\xa2\x97\x1bM#\xdfJ+E[\xd1\x1e\x02\x14\
&\x06\xa6\xcc\xdf\xa2\xbbs\xc3:y\xf5\x85IgS\x197\x14I\x88\x08\xde\x8e\xf7> \
\xa2\x07\xaa\x8a\x1b\x8c\xe0[\xdb\xb6A\xbeP\xf6\xcb5\xa9b\x85t6\xa5]!\x97\
\xee\x96S\xe4Ky\xacH\xbf\xf3\xf8\xdcd\xd2\xdb\xf7fV\xf7Vi1\xcd\xf4\xb6\xc7Q\
\x91\x1a\x03+J_\xd7YZ\x03\xadxE\x8f\x95\x9f+E\xd5j\xcc\x01\x18?\xff4\x99\xdf\
\xf7h\n\x9c\xc0\xa8A\xac\xd6m\xa0\n\xc1@\x08o\xd7\x03\xf5{^\x0f\xcdn\x06\x00\
\xee/\xa4UE\xf8\xf4c\x11\x11A\xa5\xbe\xc1\xe2Z\x0e\x11E\xac b\n\x80\xa9!\xfe\
\x870\x00#\xb3C\xfag\x1cADyy\xf3\xed?\x03%\x9e]S=\xe2("\xc2\xdc\xbd\x0f\xc6\
\x01@$\xd2\xa0\r\xc4:O\x13\x0f\xf7!\xb6\xf6\x07b\x95x\xf4\x0c\xb1h\xef\x91\
\x18\xc0\x19\xc9\xdev}_\xbev\x06\xc3\xec\xfe\xda\xa1\xeaW\xea\x1b\x88P\xb6\
\x15\xb6\x0f\xb69\xd9\x12\xe6\xd2\xf8\x85\x0c\x80\xe3We)\xd2\xdc\xdd\xd6\xd1\
\xd4A\xa9\xbc\xc7\x97\x8d\xcfH\x9d\'\x8a\x15\x96\xd7\x97\xa9T}\xdcv\x97pkW\
\xe2\xe2\xa3\x81\x8ccEr\x87\xd5C\xd6\x8b\xeb\x14J\x1b3\xd3\xc3\xef\x8c\xad\
\xdb@\xd9+\x1fF\xd6\xb6\xbe\x17\xb7v\xb7PQT%d\x00n\xbd\xba1\xaf\xbe\x1e\xbc\
\xb9\x93M\x1e\xb7\xfa\xe0\x93A\x17\xdf.\xa9jn\xe1\xe1\xc7\xeb\xbf\x01\xe0T%\
\xb4f\xd0-\xde\x00\x00\x00\x00IEND\xaeB`\x82\x99\xf0\x06\xaf' )

def getBadgeMergeBitmap():
    return BitmapFromImage(getBadgeMergeImage())

def getBadgeMergeImage():
    stream = cStringIO.StringIO(getBadgeMergeData())
    return ImageFromStream(stream)

#----------------------------------------------------------------------
def getBadgeModifiedData():
    return zlib.decompress(
'x\xda\x01\xd8\x01\'\xfe\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x10\
\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x00\x04sBIT\x08\
\x08\x08\x08|\x08d\x88\x00\x00\x01\x8fIDAT8\x8d\xad\xd2\xb1K[Q\x14\xc7\xf1\
\xef\xbd\xef\x99\xa7!y\x04\xd4\x10Si\xc5\xc1\x14\xb5f\x08\xadU\xa4\x88K\xa0\
\x94.Bq\xcb\x9f\xa0.\xadK\xc1U\'\x05\xc5\xbd\x8bt\xa8PA\xa4\xad\xd0\xa14.\
\x1a\xa9\xd5!\xdaj\x94$j\x08&\xad\xa0\x89\x9a\\\xb7\xb7\x04\xf5\x81\x9e\xf9~\
\x0e\xe7\x9e\xdf\x81;\x96\xb0\xfbp?\xfa\xbc\xa6\x98\xf4\xee\x1d\x1f\x89ZUR\
\xd2\xe9J$L\xa3\xaa[\xb7\xdb\xe0l\xdfw\xaaJ~:^G\x10R\xb2>\xff\xae)\x97>\x9e\
\xb65A\xf2kPy\xfc#\xe8\xee\x87\x08i\x00P.\xfc\xe3\xd7\xc2dY\xda\xc1u\xa1)tS\
\x90Z\x9d\xe5"\x1b\xe7"\x1b\x07@\x93\xfa\xf9\x8d\x13X\xd8\xc8SL-P>5\xf8\x1b\
\xcb\xe06\xfdd\xd3\x7f\xe8\x1c\xfc,4[\xf8\xf0\x13\xea2\x81\xd1\xf8\x14\x91\
\xcbPH\xfc&8\xf4M\xc05)T\xe0\xf3$\x0e\xdfK\xb2\xd15N\xb6w\x08\x0c\xff\xb4\\\
\xc5\x0e\xbeO\x04l\xe3\x8a\x06_\xc6ZT\xe8\xcd\x8cml}a&\xf2\xa8\xa9\xb9\xd5\
\xd8}\xdc7\xce\xc1\xce"OBE[\x18@\x07\xb84\xd5n\xd7\xc0\x07\xaa\x1d5l\xcc\xaf\
\x12\xcb\x97hh\xeb\xe1$\xbaD\xe1 C\xd7\xfb\x95k\xd3\xb2.\xd1\x90\x1a\xff\x7f\
L\x10z\xe0b+\xb6Il\xf9#N\xaf\x97W\xe3\x1b7F\xad\x01x\\\xdah\x9b3G}{\x98r\xe3\
32\xf9#\x94(\xdd\x8a\xad\x1d\x0c\xf4\xd6*\x87\x94\xbc\x08x\xf0\xb9\r\xaa\xea\
\xcc\xb9\xf0\xdbh\xffm\xf8^\xea\nT\xaa\xba\x11X\xe4\xc9\x9c\x00\x00\x00\x00I\
END\xaeB`\x82p\x11\xd9\xa7' )

def getBadgeModifiedBitmap():
    return BitmapFromImage(getBadgeModifiedImage())

def getBadgeModifiedImage():
    stream = cStringIO.StringIO(getBadgeModifiedData())
    return ImageFromStream(stream)

#----------------------------------------------------------------------
def getBadgeUptodateData():
    return zlib.decompress(
'x\xda\x01\x15\x03\xea\xfc\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\
\x10\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x00\x04sBIT\
\x08\x08\x08\x08|\x08d\x88\x00\x00\x02\xccIDAT8\x8d\xa5\x93_h\x93W\x18\xc6\
\x7f\xe7K\x13\xecL\xda\x9af%M\x9a\xb26\x88"sj\x87"\xd5\xd8u\xd2\xe1Z\x99BQG\
\xd1\xeeR\x19x!\xec\xd6+o\x9c"\xa8\x05/D\x10-\n\xbb\x18\x0c\x951\xf4\xc2I\
\xdbu\xeb\xd4vj\xfd\xdbFM\x9b43\x0e\x13kj\xce\xf7}\xe7\x1c/63P\xbc\xf2\xb9|y\
\x9f\x87\x97\x87\xdf\x0b\xef)\xf1\xe6\xa0\xf7j{\xdcH\xbbG)\xdd+\xedRXk\x17\
\x8c\xce\xa2\xcdic\xec\xb3?uNL\xbe3\xe0\x9b\xe1D\xb7td_\x03\xf1\xfae\x1f&\
\x98\xef\xad\x06`\xd6\xce\xf3\xc7\xd4%\xee\x16Fg\xb46\xbb\x7f\xfd:\xf5\xe3k\
\x8f\xa7l\x1el\xed.:\xf2Tk\xa03\xb8\xb2~=y7O\xf2\xc5\x049\xf97\xf3}~Z\xea\
\x13\xd4x\x82\x81k\xd37\xba\x1a\xbf\n\xdcK\x9f\x9b\xbdS\xbe\xa0g`m\xb3\xed\
\x94\x06\xd6\xd6tE\x16\xd6.c(w\x19W+\\\xad\xb1\xfe[\xaa\x10\x1e\xd6\xd4\xb53\
\x9e\x1e\xa1\xff\xc6\x99\x8c\xc0\x93\xb8\xf9m*i\x01\x18\xa7\xb4\xbdA\xc4#\
\x8bj\x973\x94\xbbL\xc9u\xb0\x95\x83\xab\x1cl\xd7\xc6u\x1d:"]\x8cd\x07\xf88\
\xba\x8a\x96\xda\xa5\x11)\xf5v\x00\x0b\xc0Vr\xc7\x8a\xf0:\xa6\xe7R\xb8\xcaEi\
\x17\xad\\\x84\xd6\x08m\xd8\xf4\xd1V\xda\x1b\xbed\xd7\xd2\xef\x98~\xfe\x90\
\xb6\x85\xeb\x91\xd2\xec(\x07\xbc\x942Z\xe3\x0b\x92.>Fi\xc5\x86\xe8Fv-\xd9\
\x83\xd0\x16\x9b\x9b\xb6\xd1\x16\xfd\x02\xa5]\xceO\xfc@:\x9fdAe\x1d\xe6\xa5\
\x89\x02T\x00\x94\xa4D\x1b\x83\xd1\x9a\x80\'@k\xf83\xaa|\xd5\xec]\xb5\x9f\
\xe0\xbc\x10J\xbb\x1c\x1f;\xc4\x83\xa77\xf1{\xfd\x08\x0c8\xff\x96o\x01\xe0\
\x90\xce\xcf\xe5\x88~\x10\xe3\x85,pl\xec{\x8a\xce,\xc1y!\xb4\xd1\x1c\xbf~\
\x90;OF\x11@\xa4\xaa\x91\\~\x06\xa1H\xff\xdf\x81c\xfa\x87\x92\x97\x88T\xc6\
\xf0jxR\xccp\xe4\xcf}\xdc\xffg\x9c\x13\xa3\x87\xb8\x9d\x1bCh\x81\xa5\x05\xb1\
\xaa&.\xdc\xba\x88\x81\xfe2\x07u\x1b\xab\xa7R\xf9\xcc\x96\xba\xca\x9a@K$A&?I\
\xd1~\xceH\xfa\n\xb9\xd9,\x16\x02\x9f\xe5\xa1\xad\xb9\x93\xab\x0f\x07\xf9ex0\
\x83\xf2\xee)\xfc^x\xe6\x01\xc8\x9c+<\x0buT=\x1e~4\xde\x15\xf1\xfb}\xab\x1b?\
\xa7\xc2\xf2"\xed9|\x96\x97xh1\x9f\x84W2\x92\xbc\xc2\xc9\x0b\xe7\x8b\xa2\xc2\
\xda\x99:<\xfd\xdb[(7\x1d\x88v\xeb\x92\xe9\xfb\xb4qq\xfd\x86%\x1d,\xa8\x0c\
\x81\x81\\1\xcb\xcfc\x17\xf9\xeb\xf6\xc4\x8c\x10\xd6\xee\xd4\xd1t\x19\xe5\
\xb7\x9e)\xb6/\x16\x17\x8e\xea\x11.\xbdF\x12F\x81\x80\xac\x81\xd3Fy\xceN\xf5\
MM\xbe\xe9y/\xbd\x02\x97\x88J4\xb9h\xb8#\x00\x00\x00\x00IEND\xaeB`\x82,fy\
\xcc' )

def getBadgeUptodateBitmap():
    return BitmapFromImage(getBadgeUptodateImage())

def getBadgeUptodateImage():
    stream = cStringIO.StringIO(getBadgeUptodateData())
    return ImageFromStream(stream)

#----------------------------------------------------------------------
def getBlankData():
    return zlib.decompress(
'x\xda\xeb\x0c\xf0s\xe7\xe5\x92\xe2b``\xe0\xf5\xf4p\t\x02\xd2\x02 \xcc\xc1\
\x06$\xe5?\xffO\x04R,\xc5N\x9e!\x1c@P\xc3\x91\xd2\x01\xe4\xcbx\xba8\x86X\xf4\
&\xa7\xa4$\xa5-`1\x08\\R}\xa5!\x90\xd9\x8dW\xc2\x05\xa8)6\x89A\xad\xfd\xea\
\xa4\xd7@u\x0c\x9e\xae~.\xeb\x9c\x12\x9a\x00\xf2\xb8\x17\xab' )

def getBlankBitmap():
    return BitmapFromImage(getBlankImage())

def getBlankImage():
    stream = cStringIO.StringIO(getBlankData())
    return ImageFromStream(stream)

#----------------------------------------------------------------------
def getFileData():
    return zlib.decompress(
'x\xda\x01\x87\x01x\xfe\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x10\
\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x00\x04sBIT\x08\
\x08\x08\x08|\x08d\x88\x00\x00\x01>IDAT8\x8d\x8d\x93\xcbn\xc20\x10E\x8fc\xc4\
\x9e\r\xdd\xb4R\xff\xa1*\xfd\xce\n\xb1\xe0\x93\xaa\xfeE\xbb@dC\x10!&\xd1\xd8\
\xb7\x0b\x08\r\xa1\xa1\x8c4\x92_\xf7\xf8\x8e\x1f\x8ec<\x02\x0f\x80\xe7v\xe4\
\xc0\x17\x90\xfa\x13/!\x84\xa2i\x9ahf\xfa+\x0f\x87\x83\xe6\xf3\xf9;\xf0\x0cd\
}\xc0\xaci\x9aX\x96\xa5\xf6\xfb\xfd9\xb7\xdb\xad6\x9b\x8d\xd6\xeb\xb5\xccL\
\xab\xd5J\x8b\xc5\xe2\n\xe2\x80\x99\x99)\x84\xa0\xba\xae\x15BP\x08A\xbb\xddN\
EQ(\xcfs\x99\x99\xaa\xaaRY\x96Z.\x97-\x04w\xcaW3\xfb\x881\x9e-\xa5\x94\x90\
\x84\x99Q\xd75\x93\xc9\xe4\xc2\xf2h4z\x03>G\xdd\xc1,\xcbp\xce\x9d\xdb1F\xbc\
\xf7\x8c\xc7c\x8a\xa2 \xa5\x84\x991\x9dN\x7fA]@+n\xdb\xde\xfb\x8b~\x0b\xbcp\
\xd2?\xcd>\xb0\x158\xe7p\xce!\xe9~@+\xec\x96\xd6\x8f\xab\xfb\x1c\x82\x00x\
\xef\xc9\xb2K\xc9\xa0\x83\xaeUI8\xe7H\xe9\xea\x01\xfe_B\x17\xd4\xdf\xfd&\xa0\
=\xb0\xa1\xda\xaf\x00\x92\xe4z\xab\x87\xc4\x92\xdaZ\x94\x01\x02R\x8c1t&\x06C\
R\x8a1V@\x84\xe33\x06x\xe2\xf8\x9d\xef\xba\x95\x938\x07\xbe\x7f\x00\x97\x03\
\xd3\x9c<\x91\x9cm\x00\x00\x00\x00IEND\xaeB`\x82\xad\xef\xb0\xba' )

def getFileBitmap():
    return BitmapFromImage(getFileImage())

def getFileImage():
    stream = cStringIO.StringIO(getFileData())
    return ImageFromStream(stream)

#----------------------------------------------------------------------
def getMinusData():
    return zlib.decompress(
"x\xda\xeb\x0c\xf0s\xe7\xe5\x92\xe2b``\xe0\xf5\xf4p\t\x02\xd2< \xcc\xc1\x06$\
\xc3Jc\x9e\x03)\x96b'\xcf\x10\x0e \xa8\xe1H\xe9\x00\xf2\x9d<]\x1cC4&&\xa7\
\xa4$\xa5)\xb0\x1aL\\RU\x90\x95\xe0\xf8,\xc6\xaa\xf0\xcf\xffr\x13\xd69\x87\
\xb8x\xaaVM\xea\x890\xf512N\x9e\xb1v\xf5\xe9\x05\xdc\xc2;jf:\x96\xdf\xd2\x14\
a\x96pO\xda\xc0\xc4\xa0\xf4\x8a\xab\xcau\xe2|\x1d\xa0i\x0c\x9e\xae~.\xeb\x9c\
\x12\x9a\x00Ij($" )

def getMinusBitmap():
    return BitmapFromImage(getMinusImage())

def getMinusImage():
    stream = cStringIO.StringIO(getMinusData())
    return ImageFromStream(stream)

#----------------------------------------------------------------------
def getPlusData():
    return zlib.decompress(
"x\xda\xeb\x0c\xf0s\xe7\xe5\x92\xe2b``\xe0\xf5\xf4p\t\x02\xd2< \xcc\xc1\x06$\
\xc3Jc\x9e\x03)\x96b'\xcf\x10\x0e \xa8\xe1H\xe9\x00\xf2{<]\x1cC4&&'Hp\x1c\
\xd8\xb9\xcf\xe6U\xfd\xefi\xbb\xffo\xf44J\x14L\xae\xde\x97+yx\xd3\xe9\xfc\
\x8d\xb3\xda|\x99\x99g\x1b07\x1b\xd8k\x87\xf1\xea\x18\x1c{\xaa\xec\xfe\xaf>%\
!\xf9A\xda\xef\x03\x06\xf67{\x1f\x1e\xf8\xf9\x98g\xf9\xb9\xf9\xbf\xfe\xbf~\
\xad\xcf\x96'h\xca\xe6\xcck\xe8&2\xb7\x8e\x87\xe7\xbfdAB\xfb\xbf\xe0\x88\xbf\
\xcc\xcc\x7f.\xcbH\xfc{\xfd(\xa0\xe5*\xff\xfd\xff\x06\x06\x1f\xfe\xffh\xbaj\
\xf2f^ZB\xc2\x83\xe4\xc3\xef2o13<r\xd5y\xc0\xb9\xc2\xfa\x0e\xd0]\x0c\x9e\xae\
~.\xeb\x9c\x12\x9a\x00\xcf9S\xc6" )

def getPlusBitmap():
    return BitmapFromImage(getPlusImage())

def getPlusImage():
    stream = cStringIO.StringIO(getPlusData())
    return ImageFromStream(stream)

#----------------------------------------------------------------------
def getProjectAddData():
    return zlib.decompress(
'x\xda\x01B\x02\xbd\xfd\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x10\
\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x00\x04sBIT\x08\
\x08\x08\x08|\x08d\x88\x00\x00\x01\xf9IDAT8\x8d\xa5\x91MH\x94a\x14\x85\x9fw\
\x9a!E+h\xe1\x0f\x15\xc5\x88P\x0c\x19\x93!"CDa\xb4*jQ\xeb \\(b\xd0"\xa1v\xb5\
0(j\x04\x85l\x11\xb4\xb3\x16\x16\xb4\n\xa1\xcd \x12\xa1$\xd9\x08\x05c\x84\
\x9f?\x0b\x1dk\xd2\xc1o\xee\xbd-\xbeI\x1c(i\xe8\xac\xcf}\xce=\xf7\xc2\x7f\
\xca]\xbc>\xdc\x958\xd5|oy\x9d*3@\x15SET05\xd4\x14\x13A\xcd0\x11D\x95\xdd\
\x11\xffg:=ws\xe4\xd1\x95\x81\xf0\x89Ds\x7f\xa4\xb2:T[YVpUn\xbd\xd0\x0f\x0c\
\x84\xd7|Bk\xcb\xb9\xb2W\xcf\xfb\x84\x00\xc2&\xc6\xedK\xfb\xca\x06t\'\xbf\
\x12\x00L13\x0c\x00\x03\x03\x9ccrb\xe2\xaf\xc3\xc7\xe3qD%\x00`\x86\x88\xd0\
\x91\x9c\xdd4<\xe99\x04@"\x91\xf8# \x97\xcb\xa1\x85"@4\xb8\xf0\xe3\xee\x83\
\xe0\x0c\xcc\xa1f\xdb\xae\xaf\xaa\xa8h\xb1\x82\x1a*\x8as`Z\xac\xe1\x8cX,F6\
\xbbB)\xcb\x01\x86\x03\xf4w\x05UAU\xb0-\x16\x0c\xd23\xe9\x92\xd4\xf4\xe2{f\
\x96&\xc8\xe5\xbf\xb3\xe1o\xb0.\x87\x03@\xc1\xf7\x11\x11z\x86\x167\xcd\xc9\
\x8e\xda\x92\x1b\xbc\x1e\x1ff\xde\xa68}\xb2\x95\xfd{\x1by;\xfd\x92\xf1\x8f\
\xa3\xb4t\xd5\xdf\x0f\x9b(\xaa\xca\xc3k5At\xb1\xe3V\x8d\xa4\x9eq\xe1\xdcY$$\
\x1c\xabog\xf4\xd3\x0bZ\x8f\xb6\x91\xf9\xf2\xaa+\xa4\xaa\xa8ZPC\x03\x98\xaa\
\x12\x8d6\xe0y\x1e\x9e7\xcfRv\x9e\x88\xab\xe6\xfc\x91n\x00n\x9c\x19\xa2\xa1\
\xa6\t\x87\xab\x08\xcfef\x9f\xdf\x19\xf6/\xab\x08*\x8a\x88\xa0\xaa\x88\xef\
\x0703\x96WW\x98\xf6\xc6\xf8\xe0\xa5\xe8m\x7fJ\xdf\x9b\xabT\xec\xd8\x89ay\
\xb7\xed\xbf\x8aj\xe9\xac\xbf{ \xba\xe7V[S\x82\xc6\xba8\x9f\x17&\x19\x9bJ\
\xf1-\xb3\xfa\xe0\x9f\x00\x01\xa4\xae\x0f\xe7:\x1d\xec2\xf8\x81\xd9\xe0\xbb\
\xc1\x85\xde_d\x07\x19\xd2\xf5Qq\xda\x00\x00\x00\x00IEND\xaeB`\x82\x9cW\x03G\
' )

def getProjectAddBitmap():
    return BitmapFromImage(getProjectAddImage())

def getProjectAddImage():
    stream = cStringIO.StringIO(getProjectAddData())
    return ImageFromStream(stream)

#----------------------------------------------------------------------
def getProjectDeleteData():
    return zlib.decompress(
'x\xda\x018\x02\xc7\xfd\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x10\
\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x00\x04sBIT\x08\
\x08\x08\x08|\x08d\x88\x00\x00\x01\xefIDAT8\x8d\xa5\x91\xbfk\x93a\x14\x85\
\x9f7\xf9\xaa\x89)\xfe\x00\xb5-R\xd2T\x9c\xe2R[\xb7\x0c\xa2\x93n:\xb4\xe2,U*\
\xa1\xea\xa2\xa0HA\x11\x9cj\n\xa5\xa8\x7fAE\x14\x02.\xd2A\xec"\x82Q\\\xd2E\
\x1a\xa5\t\x11\xb1-6&\xb5_\xee\xbd\x0e_\x0c\rh1x\xe6\xf3>\xe7\x9e\xf3\xc2\
\x7f\xca\x9d\xbe<{)ul\xf0\xder\x8d\x98\x19\xa0\x8a\xa9"*\x98\x1aj\x8a\x89\
\xa0f\x98\x08\xa2\xca\xce\x0e\xffG>_\xbc\xf6\xec\xfe\xc8\xb47\x94\x1a\x9c\
\xea\x88v\x86\xba\xa2m\x05\xc7*\xb5\xfa\x140\xedU}B\xd5\xe5J\xdb\xa7\xaf\xfb\
\x84\x00<\x13\xe3\xe6\x99\x03m\x03\xd2\x99O\x04\x00S\xcc\x0c\x03\xc0\xc0\x00\
\xe7x\x97\xcb\xfd\xf5\xf1\x91\x81\x01D%\x00`\x86\x880\x9a)4\r\x8f\xc6\xfb\
\x00H\xa5R\x7f\x04T*\x15\xb4\xde\x00\x88\x06\x0b?H\xc7\xc1\x19\x98C\xcd\xb6<\
_UQ\xd1F\x055T\x14\xe7\xc0\xb4Q\xc3\x19\xc9d\x92\xd5\xd5\x15ZY\x0e0\x1c\xa0\
\xbf+\xa8\n\xaa\x82m\xb2`\x90_\xc8\xb7\xc6\xe6\xb2\xc8\x9b\xa7\xd4\xcb\x9f\t\
\xef\xeb\xe6p\xf4x\x00\xa8\xfb>"\xc2\xf8\xc3/Mof\xb4\xabe\x83\xa5\xec\x0c+\
\xc5\xd7\x1c:7\xc6\xf6D\x92\xda\x87\x17\xc4\xe6\xe78z\xc2K{&\x8a\xaa2y~\x7f\
\x10\xdd\xe8\xb8Y\x8bO&\x19:{\x91\xc8\xc7\x97\xf0\xea\x0e;v\xed&\x11\x8f\xf3\
v\xc1\xaex\xaa\x8a\xaa\x01\xdah\x18\xa8\xbf\xff \xa5R\tpl\x94\nD\xba\x13p\
\xeaj\x13\xeaM\xf4\x106\xd7\xe7\x15\x17\x0b\x8fo\xcf\xfa\xc3*\x82\x8a""\xa8*\
\xe2\xfb\xc1\xdaf\x0cG\xf6P}\xff\x9cXv\x8c\x9f\xb52U`\xed{\x18\tSr[\xfeWC\
\xf3#=\x13\xdb:c7z\xf7\x8a\xe7\x85\x96X\xfbZ\xa7P\x0e\xcb\xc6\xba\xde\xfa\'@\
\x00\xe9\xbd^\xfdV\xba\x10R\x17\xd7\x90\x15\x15\x9b99\xa7w\x7f\x01\xa8\xee\n\
@\x1cm\xcd\xd8\x00\x00\x00\x00IEND\xaeB`\x82\xaf(\xffg' )

def getProjectDeleteBitmap():
    return BitmapFromImage(getProjectDeleteImage())

def getProjectDeleteImage():
    stream = cStringIO.StringIO(getProjectDeleteData())
    return ImageFromStream(stream)

#----------------------------------------------------------------------
def getScAddData():
    return zlib.decompress(
'x\xda\x01*\x02\xd5\xfd\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x10\
\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x00\x04sBIT\x08\
\x08\x08\x08|\x08d\x88\x00\x00\x01\xe1IDAT8\x8d\x8d\x93\xc1k\x13Q\x10\x87\
\xbf\xb7\xbb\r*\x1e\x8cH\xa4PA\x10E\x0f\xb5\x824\x8a\n\n\xe2\xd5\x93 x\x8b\
\x08\x82\xc1\x93\xffD\xaf\x12"\xc4\x8bz\xf0\xe2\xc9"z\xd0B\x11J\xb5\x14\xb4V\
z\x11\xbc(\x18\xb2\x97l\xc8f_6yo\xc7C\xdd4\xd94\xea\xc0\xc0\xcc{\xcc\xc7o\
\xe6\xbdQl\xdb\x0cp\x18p\xf9\xbb\xf9\xc0\x0f \xc9^\x9c\xd5Z\x07\xbd^\xcf\x1a\
cd7\xefv\xbbR\xa9T\x1e\x02G\x01\'\x0b(\xf6z=\x1b\x86\xa1t:\x9d\x81\xb7Z-i6\
\x9b\xd2h4\xc4\x18#\xf5z]\xaa\xd5\xea\x18D\x01Ec\x8ch\xad%\x8ec\xd1Z\x8b\xd6\
Z\xda\xed\xb6\x04A \xbe\xef\x8b1F\xa2(\x920\x0c\xa5V\xab\xa5\x10\xd4\x1f\x9f\
7\xc6\xacYk\x07\x92\x92$AD0\xc6\x10\xc71\xf9|~D\xb2\xe7y\xe7\x80uo\xf8\xd0q\
\x1c\x94R\x83\xd8Z\x8b\xeb\xba\xe4r9\x82  I\x12\x8c1\x14\n\x85\x1d\xd00 -Nc\
\xd7uG\xf2\x148\xa2$;\xcd,0-PJ\xa1\x94BD\xfe\x1f\x90\x16\x0e\xb7\x96\xb5\x7f\
\x02R\xc8\xd2\xa7E\x96\xbf\xbc\xa6\xd5i\xd27}.\x95N\xdc^y\xf2m}"`X\xea\x9b\
\xb5\x17l\xd4\x97\xb8|q\x9e\x99\x83\xc7Y\xdezI4\xf5\xf3n\xb1<\x1d\x8e\xfd\
\xa8\xdd@\x8b\x1f\x9es\xe6\xe4\x1c\xd6\xb1\xccM_\xc3\xaa>\xe7g/\x00R\x9e\x08\
H{VJ\xe1\x07u\xa6\xd4~\xae\x9f\xba\x0f\xc0\x83\xab\x8f9V8\x8dB\xed\x19\x00$;\
^v&\xdf\x8eZl\xfdZe\xe1]\t\x80\x85\xb7%\xbe\xfb\x9b\x08\xd2u\x00\x01\x12k\
\xad\x16\x91\xb1-\x03\xb8y\xe5\x0e\x1f7W\xc9\xe1\xf1\xea\xeb#r\xcace\xe3=\
\xa0\xaa\xe9\xdb\x1ca{\x9d\'\xb64{\xebPy\xef\x01\xef\x86Rj\x9f\x88D\xfdH\x9e\
}~\xda\xb8\xf7\x1bC\x9b\x05SIyM\xfc\x00\x00\x00\x00IEND\xaeB`\x82\xa4\xd3\
\xf2t' )

def getScAddBitmap():
    return BitmapFromImage(getScAddImage())

def getScAddImage():
    stream = cStringIO.StringIO(getScAddData())
    return ImageFromStream(stream)

#----------------------------------------------------------------------
def getScCommitData():
    return zlib.decompress(
'x\xda\x01P\x02\xaf\xfd\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x10\
\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x00\x04sBIT\x08\
\x08\x08\x08|\x08d\x88\x00\x00\x02\x07IDAT8\x8d}\x93\xbfkSQ\x14\xc7?y/\x14\
\xc5"DK[4\x15-:T\x11\x84j+H\x07-:9\xe8_\xd0Y\x1d\x05\x17\xc1Y\xc1EJ\xc1\x8e\
\x1d\xbb988)\x85\xa8\x94\xa2b\xc1\xa9\x83\xb4\x91\x86\xa6J\x12\xf3\x92\xfb\
\xde}\xe7\xde\xe3P\x13\x93\xd8\xf4\xc0\x81s\x7f\x9c\xcf=\xf7\x9e\xfb\xcd\xb0\
gy`\x04\x089\xd8\xca\xc0\x16\xe0{\x17&\x8d1Uk\xad\x13\x11\xdd\xcf\xe38\xd6\
\xf9\xf9\xf9\x17\xc0i \xe8\x05LYk]\x14E\xdah4\xda^\xab\xd5\xb4R\xa9\xe8\xce\
\xce\x8e\x8a\x88\x96J%]XX\xf8\x0f\x92\x01\xa6DD\x8d1\x9a$\x89\x1ac\xd4\x18\
\xa3\xf5z]\xab\xd5\xaa\x96\xcbe\x15\x11m6\x9b\x1aE\x91...\xb6 d\xfe\xfa\x15\
\x11Yu\xce\xb5K\xf2\xde\xa3\xaa\x88\x08I\x92\x90\xcb\xe5\xbaJ\xcef\xb3\xd3\
\xc0Z\xb6s2\x08\x022\x99L;v\xce\x11\x86!\x03\x03\x03T\xabU\xbc\xf7\x88\x08\
\xc3\xc3\xc3\xff@\x9d\x80Vr+\x0e\xc3\xb0k\xdc\x02v\x1d\xda\xfb\x9a\xbd\xc00\
\x0c\t\xc3\x90\'\xafo\xf3\xe8\xd5\r\x08\xba;x \xa0\x05\t\x82\x80\xc4\xa5\xe4\
\x87&\xb8\xbf<\x83\x95x\xff+t\xda\xc3\xe5\xeb\xa8\n\xd6\x0bV\x84\x13\xb9\xb3\
L\x8cNS\x8f\x1b\xdcyy\x8e\xc1|\xf6p\xf4C\xfa\x03\xc4[n^\x98\xc3\xa9\xc7y\x87\
G\xd9\xae\x15\xb9\x98\xbfFd\r\x95\x07+om,\xc7\xfb\x02b\xb18\xf5l\xfe\xda \
\xf5\x82\xf8\x94\xd4\xa5\xfcN\xea\\\x1a\x9b!J\x9b\xc1\xea\xf7\xc2\xcf\x03\
\x001\xe2\x84\x91\xa3\xa7\x10\xefp\xea)\xd5\xb6868\xca\xe7\xe2{\n\x1b\x85\
\x8a\x15f\xdb\x00U\xd5LG\x1f\x8d$,}|\x8e\xf5\x96X,\xe3C\xe7\xb9:~\x8b\xb5\
\xcd\x02\xeb\xdb\xeb\xec\xbe\xe3^\xe3\x03_Z\xfb/\xc7q\xdcH\xd3\xb4\xaf\x98&\
\x9f\x1e\xd1\xb9\xa5Y\x9dzvR\xbf\x15\xbf6\x80I\xd8\xfb\xc6\x00c\xec\xc9\xb9o\
[\xcf<f\xc5\x11\x1e\xda}\xe3\xee\x9aO\x14\xd9\x93v\xf1\x0f#\xcaV\x9e\xb8y\
\x94@\x00\x00\x00\x00IEND\xaeB`\x82\xe4\xe2\x10\x03' )

def getScCommitBitmap():
    return BitmapFromImage(getScCommitImage())

def getScCommitImage():
    stream = cStringIO.StringIO(getScCommitData())
    return ImageFromStream(stream)

#----------------------------------------------------------------------
def getScDiffData():
    return zlib.decompress(
'x\xda\x01\x8f\x01p\xfe\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x10\
\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x00\x04sBIT\x08\
\x08\x08\x08|\x08d\x88\x00\x00\x01FIDAT8\x8d\x85\x91\xb1n\xc20\x14E\x8f\x1d\
\x0b6\x06\x06\xbaU\xcc\xec\x85\x0fB\x0c,\xfcJU1\xb0\xf5[\xf8\t\xf6\xb6\x13\n\
\x12\x08\xa8B\x82\x1f}\x1d\x8a\xa3\x90X\xe9\x95\xa2Xy\xf6\xf1\xbd7\x06x\x06\
\x9e\x00CS)\xf0\x05\xfcDf\xa5^\x8a\xa2(DD\xabO\x9e\xe7\xba\\.\xdf\x80!`\xdb\
\x00c\x11\xd1\xcb\xe5\xa2\xe7\xf3Y\x0f\x87\x83\xa6i\xaa"\xa2Y\x96\xe9j\xb5\n\
\x90v@\x9e\xe7\x9ae\x99\x9eN\'\xdd\xedv\xa5\x13\xef\xbd\x02\x93\xbb\x0bS\x8f\
\xea\xc2"I\x92\xf2\xdd\xedv\xd9l6l\xb7[z\xbd\x1e\xc0\xe8\xbeMc\xdd\x8c\xab\
\xb7\x05\'\xeb\xf5Z\xaf\xd7\xab\xfe\xd7M\xe9\x00\xc0\x18S:\xb1\xd6b\xad\xc5{\
\x8f\x88 "x\xef\xe9\xf7\xfbL\xa7\xd3\x85s\x8e\xf9|\xfe\xdah\xd7\x18\x831\x06\
k\xed\x034I\x12\x8c\xf9\x8b\xdf\xe9t\x98\xcdf\x0b`\x10\xfd=\x01\x12:\xb1\xd6\
\x96\xdd\x1c\x8fG\xf6\xfb}\xb3D\x00U}\x80\xd4c\x05\xb0\x88\xc4\x01\xe1Pl]\
\x8dP\x9d9 u\xceM\xea)\x80\x91\x88\xbc\xd7cUA\x01\xf0\x01|F\x00\rU{\xa9G\xd0\
\xc8\xfe\xf2[\xac\x9b:\xa0U\xf5C\x00"\xf2\r\xdc\xa2V\xef\x1a\x02\x83\x96\xf9\
\rH\x7f\x01\xca\xec\xc5q\x0e\xfd\x16\x96\x00\x00\x00\x00IEND\xaeB`\x82\x14c\
\xafU' )

def getScDiffBitmap():
    return BitmapFromImage(getScDiffImage())

def getScDiffImage():
    stream = cStringIO.StringIO(getScDiffData())
    return ImageFromStream(stream)

#----------------------------------------------------------------------
def getScHistoryData():
    return zlib.decompress(
'x\xda\x01\x88\x01w\xfe\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x10\
\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x00\x04sBIT\x08\
\x08\x08\x08|\x08d\x88\x00\x00\x01?IDAT8\x8d\x95\x93\xbdjBA\x10F\xcf\xfe\xa0\
\xa5`\xa1]0m\x1a\xab\x98\x07\x12A\x1b_%\x04\x1b\xab\x94\x06\x9fC\x10R\xe6\tL\
\xd2H,\x04!\xa0\xd7\x19\xb3)t\xe5\xaa\xab\xe2\xc0\xb0\x03\xb3\xfb\xcd\xd9\
\x8f]\x03\xdc\x01U\xc0p\x1a3\xe0\x1b\xf8K\xf4\xf6\xf1\x98eY\xa6\xaa!\xa6\x88\
\x84\xe5r\x19z\xbd\xde\x0bp\x0f\xb8s\x87\r\xd0P\xd5w\x11a2\x990\x9dN\x11\x11\
J\xa5\x12"\xc2`0\x18\xf6\xfb\xfd7\xe0\xe3\x1cMCU\xc3j\xb5\n\xa3\xd1(\xac\xd7\
\xebp\x0b\x8d\x8f\x85\xb5v\xbf\xa6h\xea\xf5z\xb7\xddnWS4\x8d8i<\x1e\x87K4\
\xb1\xb7\xa3\xa9\x01\xd6\xe7q\x8c1I\x1aUEU\x11\x11\xca\xe52\xcdf\xb3\xeb\xbd\
\xa7\xd3\xe9<\xdb\xa4\xb3\xc6\xe0\x9c;\xa8\x9ds\xfb\x01\x85B\x81V\xab\xd5\
\x05*I\x81<\x8ds\x0ek-\xce9\x8a\xc5"\x8b\xc5\x82\xf9|~j"@\x08\xe1*\x8d1\x06U\
M\x0b\xc4\xa9\xe7Db?\xbf\xcf\x033\xef\xfd\x13\xdbG\xf5\xa0\xaa\xaf)\x9a8=/\
\x14\x05>\x81/\x8e\xfeB\x8a&\xef\xcb\xf1\x15\xc2.\x7f\xae\xd1\x1c\x0b\x1fxp\
\x0b\x8d\xaa\xfe\x02\x9b\xb4k\xdb\xa8\x01\x95\x0b\xfd\r0\xfb\x07\xf2\xc1\xd9\
\xed\xd4\xc5\x7f\xdf\x00\x00\x00\x00IEND\xaeB`\x82\x86z\xa6\xef' )

def getScHistoryBitmap():
    return BitmapFromImage(getScHistoryImage())

def getScHistoryImage():
    stream = cStringIO.StringIO(getScHistoryData())
    return ImageFromStream(stream)

#----------------------------------------------------------------------
def getScPatchData():
    return zlib.decompress(
'x\xda\x01l\x02\x93\xfd\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x10\
\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x00\x04sBIT\x08\
\x08\x08\x08|\x08d\x88\x00\x00\x02#IDAT8\x8d}\x93MO\x13Q\x14\x86\x9fsg:3m\
\x01\xab\x16\x0cF\xa2&B\xdd\xbb\xd1`\x82\xfe\x00]\x18M\x0c\xee\xfcG\x86\xb0\
\xf4W\xb8\xd0\xb85\x11qEta"\x18\x15?j\x11S\xa6\xb4\x9d\xe9t\xee=.J\x8b\x05\
\xf5$\xef\xea\xe6<9\xe7\xbe\xe7\x15\x06u\x0e8\x03x\xfc\xbfv\x80m\xc0\x1d}\
\xb8\x9f$\xc9^\x96e6\xcfs\xfd\x9b\xd24\xd5\x95\x95\x95G\xc0\x05\xc0\x1c\x05\
\xdc\xc9\xb2\xcc\xb6\xdbm\xedt:#\xc5q\xac\xcdfS\x1b\x8d\x86\xe6y\xae\xf5z]WW\
W\xc7 r\x00x\x18\xc7\xad\xc7\x9dn\x07c<<\xcf "#\xa9s\xfc|\xf3\x1c\xdfS\x8asW\
8={\x9e(\x8a.\x02\x9f\xfc\x03@ F\xf0<\x0fc\xcc@"\x881\xa8s\xec\xbc}\xc6\xect\
\x05S\x08\xe9\xc7\xefh\x05\x01\xc0\x0c\xf0y\xb8\xcb\x86\x119l6\x06\xe3y\xa0\
\x8e\xe6\xfb\x17\xccV+\x88\x18\x0cBP\xaa\xb0\xb7\xb5>\xda}\x08pr\x00\xf0\x0e\
\x84:\xf66_r\xaa\xec\xe3\xb2\x0c\xf1C\x9c\xed\xa3\xb6G\xd2?4a\xb8\x02\xf2\
\xc7\x04\xa8#\xdez\xc5\x89\xa2\xe0\x92\x18\xed\xf7H\xd2\x18?\x9a\xe2k3e\xfe\
\xea\xadc\x80\xea\x10\xa0\xeah}\\g2th\xe7\x17\xf9\xfe.\xa0tRKL\xc2\xfc\xd22a\
\xb1t\x0c\xd0B\x04\x9c%\xdeZc*\x04\x97\xc4\xe4\xed]\xf2\xfd\x1f\xf4L\x99\xd8\
\x9bf\xe1\xc6\x03\xc2b\x19\x119\x06\xc8\xd4\xe646\x9eR\ts\x92T\t<\x05Uz\xde$\
\xb1\xa9R\xbb9hV\xd5\xb1\x03\x1a\xfd\xc1\xf6\xeb\'\xcc\x9c,"\xce\xa1\xdd\x16\
I\x92b3G\xcb\x9f\xa6\xb6\xb4\x8c\x1fD\xa4i\x8a\xb5\x96``\xe3\x18\xc0O\xb2>\
\xe2M!\xc6\x11\x96\'\xf1|\x9f\xef\xfd\x90\x85\xeb\xf7\xf0\x83\x08\x80B\xa1@\
\xa1P\x18[ahc^\xad-\xd2mw@\x0c\x18\x9fo\xfbpi\xf1.AT\x1a\xbbJ\x11AU\x87>\xea\
p\x02;sv\x8e\xbau|\xd8\\C\x8c\xa1v\xed6Qi\x02\xe7\xc6\x83\xa7\xaa\xceZ\xdb\
\x05,\x1cfa\x02\xb8\xcc_R\xf6\x8f\xb2\x0c\xa2\xfd\xe57\xd5\xad\r:\xdd\xf2\
\xfa\xc1\x00\x00\x00\x00IEND\xaeB`\x82\x16M\x17I' )

def getScPatchBitmap():
    return BitmapFromImage(getScPatchImage())

def getScPatchImage():
    stream = cStringIO.StringIO(getScPatchData())
    return ImageFromStream(stream)

#----------------------------------------------------------------------
def getScRemoveData():
    return zlib.decompress(
'x\xda\x01+\x02\xd4\xfd\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x10\
\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x00\x04sBIT\x08\
\x08\x08\x08|\x08d\x88\x00\x00\x01\xe2IDAT8\x8d\x8d\x93\xbf\x8b\x13Q\x10\xc7\
?ow=sg!A\x8cw\xa0\x98S;\x1bA\x8d\xa5\x9d\x85 \x9c`c\xa1W\xd8\x88"\x88\x8d\
\xad\xff\xc2\x11#\xa6\x10\xb4\x16\x14\xfcQ\xa8\x8d(\'\x04\x1b\xb5PD\x14N\xe4\
\xd6D4\x9bd\x93\x97]\xdf\xdb\xb187&\x1bs:00\xf3\x86\xf9\xbc\xef\x9b\xc7(\xd6\
l;\xb0\rpY\xdf\x1a\xc0g \xc9\x16\xf6k\xad\x838\x8e\xad1F\xfe\xe6\xfd~_\xca\
\xe5\xf2\x12P\x04\x9c,\xa0\x14\xc7\xb1\r\xc3P\xba\xdd\xee\xc0[\xad\x964\x9bM\
\xa9\xd7\xebb\x8c\x11\xdf\xf7\xa5R\xa9\x8cA\x14P2\xc6\x88\xd6Z\xa2(\x12\xad\
\xb5h\xad\xa5\xd3\xe9H\x10\x04\xd2h4\xc4\x18#\xbd^O\xc20\x94j\xb5\x9aBP\xbf\
\xfd\xa01\xa6f\xad\x1dHJ\x92\x04\x11\xc1\x18C\x14E\xe4\xf3\xf9\x11\xc9\x9e\
\xe7\x1d\x02^z\xc3\x87\x8e\xe3\xa0\x94\x1a\xc4\xd6Z\\\xd7ejj\x8a \x08H\x92\
\x04c\x0c\x85B\xe1\x0fh\x18\x906\xa7\xb1\xeb\xba#y\n\x1cQ\x92\x9df\x16\x986(\
\xa5PJ!"\xff\x0fH\x1b\x87\x9f\x96\xb5\xb1\xff\x9c\x04\xf1\x1fTy}\xfe\x00/\
\x8emf\xf9\xf4n\xae\x96\xd4\xe2\xba\n\x86\xa5\xae\xde\xbfN\xbbv\x9b}\'\xce\
\xb0q~/\xfa\xcdcr\xcf\x9e\x9c}4\xf3\xee\xfd?\x15\x88\x08+w\x96\xd8sx\x81\xdc\
\xc7\xa7\xa8[\'\x99\xf9t\x97]\xc5-\x8e\xb8rq\xa2\x82t`J)b\x7f\x85\xdc\xec<\
\x1c\xbd4\xa8{W\xe6pE\x15\x07\x00\x11\x11\x95\x99T\x9az\x859z\xaf\x1e\xb2\
\xe9\xde9"\xfd\x95\x1e\xd0i\xbbX\x97U\x07\x10 \xb1\xd6j\x11\x19\xdb2\x80\x9d\
\x0b\x17x[[\xc6\xefO\xd3v7\xd0\xfc\xa1\xf8\xf0E%"r-\xbdq\x07k\xeb<q&7\x8e\
\x14\x16\xb7\x9a\xef\xc7\xa7Q\xb3}\xe4[\xf0\x93\x9b\xa7\x9e\xdb\xcb\xbf\x00\
\x9ae\x05\xb8\xed\xc5a\x1d\x00\x00\x00\x00IEND\xaeB`\x82@\xe2\xf6\xea' )

def getScRemoveBitmap():
    return BitmapFromImage(getScRemoveImage())

def getScRemoveImage():
    stream = cStringIO.StringIO(getScRemoveData())
    return ImageFromStream(stream)

#----------------------------------------------------------------------
def getScRevertData():
    return zlib.decompress(
'x\xda\x01R\x02\xad\xfd\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x10\
\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x00\x04sBIT\x08\
\x08\x08\x08|\x08d\x88\x00\x00\x02\tIDAT8\x8d}SMk\x1b1\x10}\x1aI\xbb&6\x06;`\
\x1b\xd2\x05\x1f\xedBOm\x1ar\xca\x7f\xa8\x7f\x84\x7fH\x8f>\x946\xe4\'\xf8\
\xd6\xf4w\x14\\\xe8)\x90\x93\x0f=\xc4\xac\xb7\xd8k\xf0\xd7j%M\x0f\xc5k\'N\
\xf2`\x10h\xde\xbcyH3\x02{\xbc\x01\xd0\x04 \xf1:\xa6\x00\xfe\x00\xf0O\x13\
\xef7\x9bMj\x8cq\xd6Z~.\xb6\xdb-___\x7f\x05\xd0\x06@O\x05>\x1ac\xdcr\xb9\xe4\
\xd5jU\xc4b\xb1\xe0\xf9|\xceq\x1c\xb3\xb5\x96\'\x93\t\xdf\xdc\xdc\x14"b0\x18\
4>\x9c_\xfc\xfe\x9b\xc4\xadZ\xadF\xd6Z\x84a\x88z\xbd\x8e\xb3\xb33\x84a\x08\
\xe7\x1c\x8c1\xa8\xd7\xeb0\xc6\xc0{\x8f\xe1p\xf8\xad\xdf\xef\x7f\x11\xdfoo\
\x7f\xbd\xedv\xa3f\xb3\xd9\xa8T* "\xacV+\xc4q\x8c\xf1x\x8c\xab\xab+Xk\x91e\
\x19j\xb5\xda#\xcbJ\xa9\x0b\xca\xbdQ\xedv[\x85aX$\x82 @\x14EX,\x16 "H)\x11\
\x04\x01\xd24\xc5l6\xc3t:\xdd\x8bXo\x85\xb5\x96&\x93\t\xca\xe52\xbc\xf7xxx@\
\xb7\xdb\x85s\x0eR\xee?E\x08qtG%*i\xad\xb5$"\x94\xcbe\xccf3\x94J%T\xabU8\xe7\
 \x84\x80\x94\x12RJ(\xa5\xa0\x94\x82\xd6z\xef\xc09/\xd34U\xc6\x18\x00@\x9e\
\xe7E\xd2Z[t&"\x08!\x8e\x86B\t!\xb6;\xf2\xee\xb5w\xc4\x9d\xc0N\x84\x99!\xa5\
\x043\xef\x05\x00\x06\x11!\x08\x02\xac\xd7kh\xad\x0b\x8bY\x96\x15df\x86\x10\
\x02\xde?\x1e@J\x92\xe4\xc7\xfd\xfd=NOOQ\xadV\xd1\xe9t\x10E\x11F\xa3\x11NNN\
\x8a\xe2\xa2\x80\x08D\xfb!TI\x92|\x1e\x8f\xc7\xe2\xee\xee\xeeS\xa3\xd1x\x97\
\xe79\x98\x19\xadV\x0b\xbd^\xaf\xb0\xff\x12\xc4\xc1y\x9e\xe7\xf9O\xf1\x1a\
\xfb\x00\xcc\xec\xb5\xd6\x97;/\x0c\xc0;\xe76\xcc|\xb4e\xcf\x15;\xe7\xd6\x00\
\xdca\xb7\x08\xff\xd7\xf9h\xcb^\x80\x030\xfd\x07k\x16\x15\xbf\xc4\xf1=`\x00\
\x00\x00\x00IEND\xaeB`\x82\xcd*\x01\x13' )

def getScRevertBitmap():
    return BitmapFromImage(getScRevertImage())

def getScRevertImage():
    stream = cStringIO.StringIO(getScRevertData())
    return ImageFromStream(stream)

#----------------------------------------------------------------------
def getScStatusData():
    return zlib.decompress(
'x\xda\x01U\x02\xaa\xfd\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x10\
\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x00\x04sBIT\x08\
\x08\x08\x08|\x08d\x88\x00\x00\x02\x0cIDAT8\x8d}\x93=kTQ\x10\x86\x9f9\xe7\
\xc6\xac&\x12\x12\x83&\x90\x80\xa8\x95`%j\x91\xd2\xc2\xd2\xceFD\xb0\t6"\x8a?\
\xc0\xcaN\x08!\xff\xc2\xc2\xceFH\x1bA,R\x89\xa0\x88\x82a\xa3\xb0&\xd9d\xef\
\xde{\xe6\xbc\x167\xd9|h|a\x188\xc3<3g\x981\xf65\x03\x9c\x03"\xff\xd7:\xf0\r\
\xc8G\x03W{\xbd\xde\xef\xaa\xaa<\xa5\xa4\x7fYY\x96Z\\\\\\\x00\xce\x03\xe1(\
\xe0zUU\xde\xedv\xb5\xbd\xbd=\xb0\x8d\x8d\ru:\x1d\xb5\xdbm\xa5\x94\xb4\xb6\
\xb6\xa6\xa5\xa5\xa5\x01\xa4\xd8M6\x80\x10B\x881\x12B \xe7L\x9da3E\xcad\x90"\
\xad\x1aZ\xa3c\xdc\xbdw\xffQ(\n{8?\xff\xd2\x0e\x00\xae\xa5\x94\xde\xedT\xce\
\xd7\xae\xf1y\xcb\xe8\xd5b\xa4\x10#\xc1i\xd1gz\xe24\xa7"\xb4\n\x18\n0:\\\xdc\
(\x0e\xfe\xe1\xfdO\xf8\xf0\xab\xa0\xce\xe2D\x80V\x84\xe0\x100B\x18b\xbd\xb3\
\xc5\xc9\xe0\x14JL\x9f\x9d\x04`\x00x\xfc\xfa\xd3\x93\xe5\x1f\x86\x10\x01Q\
\x07H\x19\xb2\xa0A\x80E0\x02\xad\x18\xe9%\xed\x03\x9e\xafT\xcf*\xe9v\x99\x84\
h\x02\xd1D\x8aF\xca\xe02&\x87\x8d\xa1\x18\xe9%\xc8\x046\xab\xa6p\xf1bU\xe3\
\xdd\x9d\xf4\xb4\x9f\x14<\x8a\x06,\xa2\xc1\x95\t\xb84f\\\x1e7r\x06I\xb8\x8b\
\xad\x1a\xca\xdd\xce\x8b\xcd\x9dt3%\xc6\xeb\x0c\tp\x89,\xb8s\xd1\x98\x9b\xda\
\x9b1\x98\x19\x92\x8812\x16\xc4\x99\xa2\x89\x15u\xb2\x0b\xfd\x9c\xadrP\x16)\
\x8b[\xb3\x81\xb9\xa9&aO\x9203r>\xbc\x80EO\xd9*W\xa8\xb3\xe4j\x0673rx\xc3\
\x0e\x82B8\xbc\x80\xa1_C\xdf\xa1t\xac\xf1\xe2\xcd\xf7<h{\xcf\x1f\xb5\x01\xa0\
v:U\x92\x95.z.\xca$V\xda\x99\x85U?6yw\x1e\x19 l\xe1oK\x17U\xc2J\x17\xa5C\xdf\
\xc5\xab/\xce\x83\xe5\x9a\x8f\x1dqT\x92\xb2\xbb\xef\x00n\x07\xdegi\xce\xf9\
\xaf+;F\x0e\xac\xff\x01]\x1f>\xa9\xc8\x9f\xb3\xb7\x00\x00\x00\x00IEND\xaeB`\
\x82`\xe7\x07O' )

def getScStatusBitmap():
    return BitmapFromImage(getScStatusImage())

def getScStatusImage():
    stream = cStringIO.StringIO(getScStatusData())
    return ImageFromStream(stream)

#----------------------------------------------------------------------
def getScUpdateData():
    return zlib.decompress(
'x\xda\x01\xdd\x02"\xfd\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x10\
\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x00\x04sBIT\x08\
\x08\x08\x08|\x08d\x88\x00\x00\x02\x94IDAT8\x8d}\x93\xcbO\x13Q\x14\xc6\x7fw\
\xe6\x0e3-B[\x02S\x10p\x08\xf5\x85Fk\x14E\x8d\x89F\x13\xa3.\\\xa8\x89q\xe1\
\xce\x15q\xeb\x9a\xbf\xc1\x106F\xf7\xae\\\x18\xe2\xca\x8d\xf1\x11\xc5\xb7Q\
\x8c\xc4(T\xa0\x94Wy\xb4t:\xcc\xccuA\x84\x02\x86/9\x9bs\xf3}\xe7\x9c{\xbe#XC\
\x0b\x90\x04t\xb6\xc6$\x90\x01\xc2\x8d\x0fGJ\xa5\xd2\x9c\xe7y\x81\xef\xfb\
\xea\x7f\xe1\xba\xae\xea\xed\xed\xbd\x0b\xb4\x01\xdaF\x81c\x9e\xe7\x05\x85BA\
\x15\x8b\xc5\xd5\x98\x9f\x9fW\xf9|^\xe5r9\xe5\xfb\xbe\xcaf\xb3\xaa\xaf\xafoU\
\xe4_\xbb\xe2\xf4\xcd\xa3\x97b\xad\xd1\xcb\x8f?<\xe4\xf1\xc7\x87|\xca\xbce\
\xb68E\x954\x89E\x12\x84aH$\x12\xc10\x0c\xd2\xe9t\x97\xe38Z\x7f\x7f\xffw\x01\
\xd0}\xff\xfaM\x15h=\'\xf7\x1fO5\xd9{)k\xcdL\xe6\xc7\xf931\x80\xf4\x0b\x9c\
\xdau\x8e\x8e\xe4!\x12\x89\xc4\xba\x96\xa5\x94]\xb2\xfb\xc1\x8dSR\xd7\xef\\;\
\x7f%U\x13w\xc8/\x98\xcc\x96L\xc6\xdc6\xa2\xf1$\xb6\xf9\x86\xe7CO\x89G\xea\
\x10B\x10\x86!\xbe\xefc\xdb\xf6\x8a\x88&\xb8z \xd5q \x17\xab\xc1\xf5|\x86\
\xe7\xab\x19\x9eZf\xc6\x1f!\xba\xfd\'F\xc4e9Sdp\xe2\x0bm\r\xbb\x08\x82\x00]_\
[\x94\x86\x10\x17\xad\xfa\x18#K\xe3\xe8\xe16>\xfd.\x10Xy\n\xce+\xbe\xcaw\x0c\
\x8c\x0e\xe2\xd8-\xfc\x18\xff\x8a\x94\x12)%\x86a\xac\x8d!\x94\xd8\xed\xcbef\
\x16\n\xbc\x9c)\x92_\xd0\xa9\xb2\x96I\x98i\xbcI\x87\xd2\xf4k\xa2)\x93\xa9\
\xc5\x89u\x95W\x05B\x11\x0eiK\xe1\x9e\xa8lfx"$4\x12\x0c\x8fUQ|\x0fQ\xab\x9ed\
]\x96\x99\x85i\xec\xdaF\x00t]G)U1\x82\xe2\xc9tv\x8a\xf2\xdc\x0bL3\x83\xf0<\
\xaa\xacZ\xac\x98\x8f\x19\x1f\xa0=V\xe6{f\x84\x8e\xe6\x83\x08!\xd6\x91\x014\
\xa5x\xf4kl\xe4\xcb\x8e\xb0\x9a\x9d\r\x06v\xa4L\x9d\xee\xb2\xbdf\x9c\xce\xc6\
?\x94\x8a\xb3$\x13-\x1cl=\xb2B\xd044m\xcd\x84\xab>\xf0\xcaaO\xa3\xed\xa4b\
\xd1\xc3h\xa2\x01C\x0e24\xfa\x86\xa6\xb8\xc3\xd9\xfd\x17\xe8l?\xb9\xae\xb2\
\x10\x02)e\x97\xa8p\xe2\xad\xdb\xdd\xb7\xef}\x1b\xfd\xcc\xf4b\x8e\x86\xdaF\
\xf6\xb5\xa4I\xef\xe8\xa4\xdd\xde\xbd\xe9\xf3\x94R\xa1a\x18\'DE\xae\xd3u\xdd\
g\xba\xae[B\x88M\x87\xb2\x91\x1c\x04\xc1\x92eYg*\x05ZY9\xe7-\xc9\x15\x08\x80\
\xc9\xbf\xa02!\xf8\xc8\x01G\xa2\x00\x00\x00\x00IEND\xaeB`\x829\xd5X\xae' )

def getScUpdateBitmap():
    return BitmapFromImage(getScUpdateImage())

def getScUpdateImage():
    stream = cStringIO.StringIO(getScUpdateData())
    return ImageFromStream(stream)

#----------------------------------------------------------------------
def getTextfileData():
    return zlib.decompress(
'x\xda\x01\xb9\x01F\xfe\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x10\
\x00\x00\x00\x10\x08\x06\x00\x00\x00\x1f\xf3\xffa\x00\x00\x00\x04sBIT\x08\
\x08\x08\x08|\x08d\x88\x00\x00\x01pIDAT8\x8d}\x93=\x8e\x1aA\x10F_\xcfr\x06\
\x9cx\x85#\xc8\x08\xb0X\'$\x9c\x82sY\x88\x80\x13!\x8b\x8c\x90\x8cu\x80 a\x10\
\x03\r=U]\x0e\xd8\x193\xc3\xee\x94\xf4I\xfdW\xef\xabnu9\xee\xf1\x1d\xf8\x06\
\xbc\xd0\x1c{\xe0\x1d\x88\xf5\x8d\x9f\xde\xfb4\x84\xa0"b\x9f\xe9z\xbd\xdat:\
\xfd\r\xfc\x00\x92:\xe0-\x84\xa0Y\x96\xd9\xf9|.u<\x1e\xedp8\xd8n\xb73\x11\
\xb1\xedvk\xb3\xd9\xec\t\xe2\x807\x111\xef\xbd\xddn7\xf3\xde\x9b\xf7\xdeN\
\xa7\x93\xa5ij\xfb\xfd\xdeD\xc4.\x97\x8beYf\xf3\xf9\xbc\x80\xe0>4\x14\x91?\
\xaa\xcab\xb1 \x84@\x08\x81<\xcfKM&\x93J\xc9\xadV\xeb\x17\xb0l=.&I\xc2h4\x02\
\xc0\xccPUT\x15\x11!MSb\x8c\x88\x08\xedv\xfb?\xe8\x11\xe0\x9cc\xb9\\\x92\xe7\
9"B\x08\x01\x11)A1F\xc6\xe3q\xb5\x92\xfak\x0e\x87\xc3\xca\xbc\xa8$\xc6\x88\
\xaabf\xcd\x80\xd5j\x85\x88T\x9c\x8b\xc4\x18cy\xc5/\x01\xfd~\xbf\xbeT&\x17\
\xe3F\xc0z\xbd.\x1f.\xc6X\x96\x0e\x10cd0\x184\x03\xba\xddn\xc5\xa9\xeeX\x8f\
\'\xc0f\xb3)\x9d\x0b=Bz\xbd\xde\xe7\x0033\xe7\x9c\xebt:\x8d\x8e\x1fg\x8bf\
\xb2\x040 \xaa\xaa\x7f\xd8hLV\xd5\x0b\xa0p\xff\xc6\x00\xaf\xdc\xdb\xf9\xa9\
\xcb\xbe\x08\xe5\xde\xda\x7f\xff\x01\xd8\tDc\xa5{\xa3\xcd\x00\x00\x00\x00IEN\
D\xaeB`\x82,\x02\xc1|' )

def getTextfileBitmap():
    return BitmapFromImage(getTextfileImage())

def getTextfileImage():
    stream = cStringIO.StringIO(getTextfileData())
    return ImageFromStream(stream)

